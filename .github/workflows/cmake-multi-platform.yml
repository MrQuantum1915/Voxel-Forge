name: CMake on multiple platforms with Qt and COLMAP

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-lest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    env:
      BUILD_DIR: ${{ github.workspace }}/build
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      QT_DIR_LINUX: ${{ github.workspace }}/Qt
      QT_VER: 6.6.3

    steps:
      - uses: actions/checkout@v4

      # Common: cache compiler artifacts (ccache) for speed
      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}

      # ----------------------
      # Ubuntu setup
      # ----------------------
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build ccache git cmake
          # Optional: install Qt5 from apt (works for many projects)
          # sudo apt-get install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
          # We will install Qt 6 via aqtinstall for consistent versions

      - name: Install Python tools (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install aqtinstall

      - name: Install Qt via aqtinstall (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          python3 -m aqt install-qt linux desktop ${QT_VER} --outputdir "${QT_DIR_LINUX}"
          echo "QT_PREFIX=$(echo ${QT_DIR_LINUX}/${QT_VER}/gcc_64)" >> $GITHUB_ENV

      # Option A (Ubuntu): Install COLMAP via vcpkg (builds from source)
      - name: Setup vcpkg (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          git clone https://github.com/microsoft/vcpkg.git "${VCPKG_ROOT}"
          "${VCPKG_ROOT}/bootstrap-vcpkg.sh"
          echo "VCPKG_ROOT=${VCPKG_ROOT}" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV

      - name: Install COLMAP with vcpkg (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          "${VCPKG_ROOT}/vcpkg" install colmap:x64-linux
          echo "VCPKG_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

      # Alternative Option (Ubuntu): Install COLMAP quickly via snap (no dev cmake config; not suitable for find_package)
      # - name: Install COLMAP via snap (Ubuntu)
      #   if: runner.os == 'Linux'
      #   run: sudo snap install colmap

      # ----------------------
      # Windows setup
      # ----------------------
      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          echo "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install COLMAP with vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$env:VCPKG_ROOT\vcpkg.exe" install colmap:x64-windows
          echo "VCPKG_TOOLCHAIN_FILE=$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Qt via aqtinstall (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          py -m pip install --upgrade pip
          py -m pip install aqtinstall
          py -m aqt install-qt windows desktop ${env:QT_VER} --outputdir "$env:QT_DIR_WIN"
        env:
          QT_DIR_WIN: ${{ github.workspace }}\Qt

      - name: Locate Qt CMake path (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $qt = Get-ChildItem "$env:QT_DIR_WIN" -Recurse -Filter Qt6Config.cmake | Select-Object -First 1
          if (-not $qt) { throw "Qt6Config.cmake not found" }
          $qtPrefix = Split-Path -Parent $qt.FullName
          echo "QT_PREFIX=$qtPrefix" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ----------------------
      # Configure + Build + Test (common)
      # ----------------------
      - name: Configure CMake
        run: >
          cmake -B "${{ env.BUILD_DIR }}"
          -G Ninja
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_TOOLCHAIN_FILE }}"
          -DCMAKE_PREFIX_PATH="${{ env.QT_PREFIX }}"
          -S "${{ github.workspace }}"

      - name: Build
        run: cmake --build "${{ env.BUILD_DIR }}" --config ${{ matrix.build_type }} --parallel

      - name: Test
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

      - name: Save ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}







# # Cmake build test for multiple platform with cache optimised for better build times.
# name: CMake on multiple platforms

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ${{ matrix.os }}

#     strategy:
#       # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
#       fail-fast: false

#       # Set up a matrix to run the following 3 configurations:
#       # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
#       # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
#       # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
#       #
#       # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
#       matrix:
#         os: [ubuntu-latest, windows-latest]
#         build_type: [Release]
#         c_compiler: [gcc, clang, cl]
#         include:
#           - os: windows-latest
#             c_compiler: cl
#             cpp_compiler: cl
#           - os: ubuntu-latest
#             c_compiler: gcc
#             cpp_compiler: g++
#           - os: ubuntu-latest
#             c_compiler: clang
#             cpp_compiler: clang++
#         exclude:
#           - os: windows-latest
#             c_compiler: gcc
#           - os: windows-latest
#             c_compiler: clang
#           - os: ubuntu-latest
#             c_compiler: cl

#     steps:
#     - uses: actions/checkout@v4

#     #use previous cache
#     - name: Restore CCache Cache
#       uses: actions/cache@v4.2.4
#       with:
#         path: ~/.ccache
#         key: ${{ runner.os }}-ccache-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
          
#     - name: Set reusable strings
#       # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#       id: strings
#       shell: bash
#       run: |
#         echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: >
#         cmake -B ${{ steps.strings.outputs.build-output-dir }}
#         -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#         -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#         -S ${{ github.workspace }}

#     - name: Build
#       # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#    # Save the cache for future build
#     - name: Save CCache Cache
#       uses: actions/cache@v4.2.4
#       with:
#         path: ~/.ccache
#         key: ${{ runner.os }}-ccache-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
      
#     - name: Test
#       working-directory: ${{ steps.strings.outputs.build-output-dir }}
#       # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest --build-config ${{ matrix.build_type }}
